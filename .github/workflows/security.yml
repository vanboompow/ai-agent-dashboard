name: Security Scanning and Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python (for backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js (for frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies and run security audit (Backend)
      if: matrix.component == 'backend'
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Check for known security vulnerabilities
        safety check --json --output safety-report.json || true
        
        # Generate requirements audit
        pip-audit --format=json --output=pip-audit.json || true
    
    - name: Install dependencies and run security audit (Frontend)
      if: matrix.component == 'frontend'
      run: |
        cd client
        npm ci
        
        # Run npm audit
        npm audit --audit-level=high --json > npm-audit.json || true
        
        # Run Retire.js for JavaScript vulnerability scanning
        npm run retire || npx retire --js --outputformat json --outputpath retire-report.json . || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-security-${{ matrix.component }}
        path: |
          server/safety-report.json
          server/pip-audit.json
          client/npm-audit.json
          client/retire-report.json
        retention-days: 30

  code-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    strategy:
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality
    
    - name: Set up Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies (for Python analysis)
      if: matrix.language == 'python'
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install Node.js dependencies (for JavaScript analysis)
      if: matrix.language == 'javascript'
      run: |
        cd client
        npm ci
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog secret scanner
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  infrastructure-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov security analysis
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: checkov
    
    - name: Run Hadolint Docker linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: server/Dockerfile
        output-file: hadolint-backend.sarif
        format: sarif
        no-fail: true
    
    - name: Run Hadolint Docker linter (Frontend)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: client/Dockerfile
        output-file: hadolint-frontend.sarif
        format: sarif
        no-fail: true
    
    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          hadolint-backend.sarif
          hadolint-frontend.sarif
        category: hadolint

  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd client
        npm ci
        npm install -g license-checker
    
    - name: Generate Python license report
      run: |
        cd server
        pip-licenses --format=json --output-file=python-licenses.json --with-urls
    
    - name: Generate Node.js license report
      run: |
        cd client
        license-checker --json --out npm-licenses.json
    
    - name: Check for problematic licenses
      run: |
        # Define problematic licenses
        PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "SSPL" "OSL" "EPL" "MPL")
        
        echo "Checking for problematic licenses..."
        
        # Check Python licenses
        if [ -f server/python-licenses.json ]; then
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -i "$license" server/python-licenses.json; then
              echo "⚠️ Found potentially problematic license in Python dependencies: $license"
            fi
          done
        fi
        
        # Check Node.js licenses
        if [ -f client/npm-licenses.json ]; then
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -i "$license" client/npm-licenses.json; then
              echo "⚠️ Found potentially problematic license in Node.js dependencies: $license"
            fi
          done
        fi
        
        echo "✅ License check completed"
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          server/python-licenses.json
          client/npm-licenses.json
        retention-days: 30

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-check, code-analysis, secret-scan, infrastructure-scan, license-check]
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Component | Status | Notes |" >> security-summary.md
        echo "|-----------|--------|-------|" >> security-summary.md
        
        # Check each job status
        echo "| Dependency Check | ${{ needs.dependency-check.result }} | Backend and Frontend dependency vulnerabilities |" >> security-summary.md
        echo "| Code Analysis | ${{ needs.code-analysis.result }} | CodeQL security analysis |" >> security-summary.md
        echo "| Secret Scan | ${{ needs.secret-scan.result }} | TruffleHog secret detection |" >> security-summary.md
        echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} | Checkov and Hadolint analysis |" >> security-summary.md
        echo "| License Check | ${{ needs.license-check.result }} | Dependency license verification |" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        
        # Generate recommendations based on failures
        if [[ "${{ needs.dependency-check.result }}" == "failure" ]]; then
          echo "- 🔴 **Critical**: Update vulnerable dependencies identified in dependency scan" >> security-summary.md
        fi
        
        if [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "- 🔴 **Critical**: Remove or rotate secrets detected in code" >> security-summary.md
        fi
        
        if [[ "${{ needs.code-analysis.result }}" == "failure" ]]; then
          echo "- 🟡 **Medium**: Address security issues identified in code analysis" >> security-summary.md
        fi
        
        if [[ "${{ needs.infrastructure-scan.result }}" == "failure" ]]; then
          echo "- 🟡 **Medium**: Fix infrastructure security issues" >> security-summary.md
        fi
        
        if [[ "${{ needs.license-check.result }}" == "failure" ]]; then
          echo "- 🟡 **Low**: Review and address license compliance issues" >> security-summary.md
        fi
        
        # If all passed
        if [[ "${{ needs.dependency-check.result }}" == "success" && 
              "${{ needs.code-analysis.result }}" == "success" && 
              "${{ needs.secret-scan.result }}" == "success" && 
              "${{ needs.infrastructure-scan.result }}" == "success" && 
              "${{ needs.license-check.result }}" == "success" ]]; then
          echo "- ✅ **All security checks passed!** No immediate action required." >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review detailed scan results in workflow artifacts" >> security-summary.md
        echo "2. Address critical and high-priority issues first" >> security-summary.md
        echo "3. Schedule regular security reviews" >> security-summary.md
        echo "4. Consider implementing additional security measures" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90